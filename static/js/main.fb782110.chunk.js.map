{"version":3,"sources":["dbank.png","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","web3","account","token","dbank","balance","dBankAddress","a","this","loadBlockchainData","dispatch","window","ethereum","Web3","eth","net","getId","netId","getAccounts","accounts","getBalance","setState","alert","Contract","Token","abi","networks","address","dBank","e","console","log","amount","methods","deposit","send","value","toString","from","preventDefault","withdraw","className","href","target","rel","src","alt","height","role","Tabs","defaultActiveKey","id","Tab","eventKey","title","onSubmit","depositAmount","step","type","placeholder","required","ref","input","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb782110.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dbank.adca41d3.png\";","import { Tabs, Tab } from 'react-bootstrap'\r\nimport dBank from '../abis/dBank.json'\r\nimport React, { Component } from 'react';\r\nimport Token from '../abis/Token.json'\r\nimport dbank from '../dbank.png';\r\nimport Web3 from 'web3';\r\nimport './App.css';\r\n\r\n\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadBlockchainData(this.props.dispatch)\r\n  }\r\n\r\n  async loadBlockchainData(dispatch) {\r\n\r\n    if(typeof window.ethereum!== \"undefined\"){\r\n      const web3 = new Web3(window.ethereum)\r\n      const netId = await web3.eth.net.getId()\r\n      const accounts = await web3.eth.getAccounts()\r\n      const balance = await web3.eth.getBalance(accounts[0])\r\n     \r\n      if(typeof accounts[0] !== 'undefined'){\r\n        const balance = await web3.eth.getBalance(accounts[0])\r\n        this.setState({account:accounts[0],balance:balance,web3:web3})\r\n      }\r\n      else{\r\n        window.alert(\"Connect to the Metamask...\")\r\n      }\r\n\r\n      try{\r\n      const token = new web3.eth.Contract(Token.abi,Token.networks[netId].address)\r\n      const dbank = new web3.eth.Contract(dBank.abi,dBank.networks[netId].address)\r\n      const dBankAddress = dBank.networks[netId].address\r\n      this.setState({token,dbank,dBankAddress})\r\n      }catch(e){\r\n        console.log('Error',e);\r\n        alert(\"Contract not deployed...\")\r\n      }\r\n    }\r\n    else{\r\n      window.alert(\"You Have to Install MetaMask...\")\r\n    }\r\n}\r\n\r\n  async deposit(amount) {\r\n    if(this.state.dbank !== 'undefined'){\r\n      try{\r\n        await this.state.dbank.methods.deposit().send({value:amount.toString(),from:this.state.account})\r\n      }\r\n      catch(e){\r\n        console.log(\"Error\",e);\r\n      }\r\n    }\r\n   \r\n  }\r\n\r\n  async withdraw(e) {\r\n    e.preventDefault()\r\n    if(this.state.dbank!=='undefined'){\r\n      try{\r\n        await this.state.dbank.methods.withdraw().send({from: this.state.account})\r\n      } catch(e) {\r\n        console.log('Error, withdraw: ', e)\r\n      }\r\n    }\r\n  }\r\n  \r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      web3: 'undefined',\r\n      account: '',\r\n      token: null,\r\n      dbank: null,\r\n      balance: 0,\r\n      dBankAddress: null\r\n    }\r\n  }\r\n\r\n  render() {\r\n   return (\r\n      <div className='text-monospace'>\r\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n          <a\r\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n            href=\"http://www.dappuniversity.com/bootcamp\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n        <img src={dbank} className=\"App-logo\" alt=\"logo\" height=\"32\"/>\r\n          <b>dBank</b>\r\n        </a>\r\n        </nav>\r\n        <div className=\"container-fluid mt-5 text-center\">\r\n        <br></br>\r\n          <h1>Welcome To dBank</h1>\r\n          <h3>{this.state.account}</h3>\r\n          <br></br>\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n              <div className=\"content mr-auto ml-auto\">\r\n              <Tabs defaultActiveKey=\"profile\" id=\"uncontrolled-tab-example\">\r\n                <Tab eventKey=\"deposite\" title=\"Deposite\">\r\n                  <div>\r\n                    <br></br>\r\n                    How much do you want to deposit?\r\n                    <br></br>\r\n                    (min.amount is 0.01ETH)\r\n                    <br></br>\r\n                    (one deposite is possible at a time)\r\n                    <br></br>\r\n\r\n                    <form onSubmit={(e) => {\r\n                      e.preventDefault()\r\n                      let amount = this.depositAmount.value\r\n                      amount = amount * 10**18\r\n                      this.deposit(amount)\r\n                    }}>\r\n                      <div className='form-group mr-sm-2'>\r\n                        <br></br>\r\n                        <input\r\n                        id = 'depositAmount'\r\n                        step = '0.01'\r\n                        type = 'number'\r\n                        className = \"form-control form-control-md\"\r\n                        placeholder=\"Amount...\"\r\n                        required\r\n                        ref={(input) => {this.depositAmount = input}}\r\n                        />\r\n                      </div>\r\n                      <button type=\"submit\" className=\"btn btn-primary\">Deposite</button>\r\n                    </form>\r\n                  </div>\r\n                </Tab>\r\n               \r\n                <Tab eventKey=\"withdraw\" title=\"Withdraw\">\r\n                  <div>\r\n                    <br></br>\r\n                    Do you want to withdraw?\r\n                    <br></br>\r\n                    (Interest will be added..)\r\n                    </div>\r\n                    <br></br>\r\n                    <button type='submit' className='btn btn-primary' onClick={(e) => this.withdraw(e)}>WITHDRAW</button>\r\n                </Tab>\r\n\r\n              </Tabs>\r\n              </div>\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}